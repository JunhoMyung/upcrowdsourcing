import React, { Component } from 'react'
import InputBase from '@material-ui/core/InputBase';
import SendBtn from "./Images/SendBtn.png"
import InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';
import Bunny from "./Images/Bunny.png"
import Deer from "./Images/Deer.png"
import Owl from "./Images/Owl.png"
import Bear from "./Images/Bear.png"
import Raccoon from "./Images/Raccoon.png"
import Squirrel from "./Images/Squirrel.png"
import 'emoji-mart/css/emoji-mart.css'
import { Picker } from 'emoji-mart'
import Tooltip from '@material-ui/core/Tooltip';
import { Icon } from '@iconify/react';
import { db } from './Firebase'

export default class Chat extends Component {


    state = {
        msg: "",
        emoji: false,
        hover: "",
        reaction: false,
        xcord: 0,
        ycord: 0,
        reactionclicked: null,
        reply: "null",
        lastType: null,
        lastEmoji: null,
    }

    constructor(props) {
        super(props)
        this.sendMsg = this.sendMsg.bind(this)
        this.keyPress = this.keyPress.bind(this)
        this.myref = React.createRef()
        this.wrapperRef = React.createRef();
        this.emojiRef = React.createRef();
        this.inputRef = React.createRef();
        this.reactionRef = React.createRef();
        this.handleClickOutside = this.handleClickOutside.bind(this);
        this.handleClickOutsideReaction = this.handleClickOutsideReaction.bind(this);
    }

    handleClickOutside(event) {
        if (this.wrapperRef && this.wrapperRef.current && !this.wrapperRef.current.contains(event.target)) {
            if (this.emojiRef.current !== event.target){
                this.setState({ emoji: false })
            }
        }
    }

    handleClickOutsideReaction(event) {
        if (this.reactionRef && this.reactionRef.current && !this.reactionRef.current.contains(event.target)) {
            this.setState({ reaction: false, reactionclicked: null })
        }
    }
    
    sendMsg = () => {
        if (this.state.msg !== ""){
            this.props.handler(this.props.name, this.state.msg, Date.now(), this.state.reply)
            db.ref('/' + this.props.roomName + '/msg/').push({name: this.props.name, msg: this.state.msg, time: Date.now(), reply: this.state.reply})
            db.ref('/' + this.props.roomName + '/'+ this.props.name +'/msgdelay/').push(Date.now() - this.state.lastType)
        }
        this.setState({ msg: "", reply: "null" })
    }

    keyPress(e){
        if(e.keyCode === 13){
            this.sendMsg()
        }
    }
    
    handleEmoji = () => {
        if(this.state.emoji){
            this.setState({ emoji: false })
        }
        else {
            this.setState({ emoji: true, lastEmoji: Date.now() })
        }
    }

    componentDidUpdate(prevProps) {
        const El = document.getElementById('ChatRecord');
        if (prevProps.msgList.length !== this.props.msgList.length){
            if ((El.scrollHeight - El.scrollTop) < 900){
                El.scrollTo(0, El.scrollHeight)
            }
            else {
                if(this.props.nameList[this.props.nameList.length - 1] === this.props.name){
                    El.scrollTo({
                        top: El.scrollHeight,
                        behavior: 'smooth',
                      })
                }
                // else{

                // }
            }
        }
    }

    componentDidMount() {
        document.addEventListener('mousedown', this.handleClickOutside);
        document.addEventListener('mousedown', this.handleClickOutsideReaction);
        const El = document.getElementById('ChatRecord');
        if (El){
            El.scrollTo(0, El.scrollHeight)
        }
    }

    componentWillUnmount() {
        document.removeEventListener('mousedown', this.handleClickOutside);
        document.removeEventListener('mousedown', this.handleClickOutsideReaction);
    }

    addEmoji = e => {
        db.ref('/' + this.props.roomName + '/'+ this.props.name +'/emojidelay/').push(Date.now() - this.state.lastEmoji)
        let sym = e.unified.split('-')
        let codesArray = []
        sym.forEach(el => codesArray.push('0x' + el))
        let emoji = String.fromCodePoint(...codesArray)
        this.setState({
            msg: this.state.msg + emoji,
            emoji: false,
            lastType: Date.now(),
        })
        this.inputRef.current.focus()
    }

    removeEmoji = (str) => {
        const ranges = [
            '❤️','⛱️','🧑🏻‍❤️‍💋‍🧑🏼','🧑🏻‍❤️‍💋‍🧑🏽','🧑🏻‍❤️‍💋‍🧑🏾','🧑🏻‍❤️‍💋‍🧑🏿','🧑🏼‍❤️‍💋‍🧑🏻','🧑🏼‍❤️‍💋‍🧑🏽','🧑🏼‍❤️‍💋‍🧑🏾','🧑🏼‍❤️‍💋‍🧑🏿','🧑🏽‍❤️‍💋‍🧑🏻','🧑🏽‍❤️‍💋‍🧑🏼','🧑🏽‍❤️‍💋‍🧑🏾','🧑🏽‍❤️‍💋‍🧑🏿','🧑🏾‍❤️‍💋‍🧑🏻','🧑🏾‍❤️‍💋‍🧑🏼','🧑🏾‍❤️‍💋‍🧑🏽','🧑🏾‍❤️‍💋‍🧑🏿','🧑🏿‍❤️‍💋‍🧑🏻','🧑🏿‍❤️‍💋‍🧑🏼','🧑🏿‍❤️‍💋‍🧑🏽','🧑🏿‍❤️‍💋‍🧑🏾','👩🏻‍❤️‍💋‍👨🏻','👩🏻‍❤️‍💋‍👨🏼','👩🏻‍❤️‍💋‍👨🏽','👩🏻‍❤️‍💋‍👨🏾','👩🏻‍❤️‍💋‍👨🏿','👩🏼‍❤️‍💋‍👨🏻','👩🏼‍❤️‍💋‍👨🏼','👩🏼‍❤️‍💋‍👨🏽','👩🏼‍❤️‍💋‍👨🏾','👩🏼‍❤️‍💋‍👨🏿','👩🏽‍❤️‍💋‍👨🏻','👩🏽‍❤️‍💋‍👨🏼','👩🏽‍❤️‍💋‍👨🏽','👩🏽‍❤️‍💋‍👨🏾','👩🏽‍❤️‍💋‍👨🏿','👩🏾‍❤️‍💋‍👨🏻','👩🏾‍❤️‍💋‍👨🏼','👩🏾‍❤️‍💋‍👨🏽','👩🏾‍❤️‍💋‍👨🏾','👩🏾‍❤️‍💋‍👨🏿','👩🏿‍❤️‍💋‍👨🏻','👩🏿‍❤️‍💋‍👨🏼','👩🏿‍❤️‍💋‍👨🏽','👩🏿‍❤️‍💋‍👨🏾','👩🏿‍❤️‍💋‍👨🏿','👨🏻‍❤️‍💋‍👨🏻','👨🏻‍❤️‍💋‍👨🏼','👨🏻‍❤️‍💋‍👨🏽','👨🏻‍❤️‍💋‍👨🏾','👨🏻‍❤️‍💋‍👨🏿','👨🏼‍❤️‍💋‍👨🏻','👨🏼‍❤️‍💋‍👨🏼','👨🏼‍❤️‍💋‍👨🏽','👨🏼‍❤️‍💋‍👨🏾','👨🏼‍❤️‍💋‍👨🏿','👨🏽‍❤️‍💋‍👨🏻','👨🏽‍❤️‍💋‍👨🏼','👨🏽‍❤️‍💋‍👨🏽','👨🏽‍❤️‍💋‍👨🏾','👨🏽‍❤️‍💋‍👨🏿','👨🏾‍❤️‍💋‍👨🏻','👨🏾‍❤️‍💋‍👨🏼','👨🏾‍❤️‍💋‍👨🏽','👨🏾‍❤️‍💋‍👨🏾','👨🏾‍❤️‍💋‍👨🏿','👨🏿‍❤️‍💋‍👨🏻','👨🏿‍❤️‍💋‍👨🏼','👨🏿‍❤️‍💋‍👨🏽','👨🏿‍❤️‍💋‍👨🏾','👨🏿‍❤️‍💋‍👨🏿','👩🏻‍❤️‍💋‍👩🏻','👩🏻‍❤️‍💋‍👩🏼','👩🏻‍❤️‍💋‍👩🏽','👩🏻‍❤️‍💋‍👩🏾','👩🏻‍❤️‍💋‍👩🏿','👩🏼‍❤️‍💋‍👩🏻','👩🏼‍❤️‍💋‍👩🏼','👩🏼‍❤️‍💋‍👩🏽','👩🏼‍❤️‍💋‍👩🏾','👩🏼‍❤️‍💋‍👩🏿','👩🏽‍❤️‍💋‍👩🏻','👩🏽‍❤️‍💋‍👩🏼','👩🏽‍❤️‍💋‍👩🏽','👩🏽‍❤️‍💋‍👩🏾','👩🏽‍❤️‍💋‍👩🏿','👩🏾‍❤️‍💋‍👩🏻','👩🏾‍❤️‍💋‍👩🏼','👩🏾‍❤️‍💋‍👩🏽','👩🏾‍❤️‍💋‍👩🏾','👩🏾‍❤️‍💋‍👩🏿','👩🏿‍❤️‍💋‍👩🏻','👩🏿‍❤️‍💋‍👩🏼','👩🏿‍❤️‍💋‍👩🏽','👩🏿‍❤️‍💋‍👩🏾','👩🏿‍❤️‍💋‍👩🏿','🏴󠁧󠁢󠁥󠁮󠁧󠁿','🏴󠁧󠁢󠁳󠁣󠁴󠁿','🏴󠁧󠁢󠁷󠁬󠁳󠁿','🧑🏻‍🤝‍🧑🏻','🧑🏻‍🤝‍🧑🏼','🧑🏻‍🤝‍🧑🏽','🧑🏻‍🤝‍🧑🏾','🧑🏻‍🤝‍🧑🏿','🧑🏼‍🤝‍🧑🏻','🧑🏼‍🤝‍🧑🏼','🧑🏼‍🤝‍🧑🏽','🧑🏼‍🤝‍🧑🏾','🧑🏼‍🤝‍🧑🏿','🧑🏽‍🤝‍🧑🏻','🧑🏽‍🤝‍🧑🏼','🧑🏽‍🤝‍🧑🏽','🧑🏽‍🤝‍🧑🏾','🧑🏽‍🤝‍🧑🏿','🧑🏾‍🤝‍🧑🏻','🧑🏾‍🤝‍🧑🏼','🧑🏾‍🤝‍🧑🏽','🧑🏾‍🤝‍🧑🏾','🧑🏾‍🤝‍🧑🏿','🧑🏿‍🤝‍🧑🏻','🧑🏿‍🤝‍🧑🏼','🧑🏿‍🤝‍🧑🏽','🧑🏿‍🤝‍🧑🏾','🧑🏿‍🤝‍🧑🏿','👩🏻‍🤝‍👩🏼','👩🏻‍🤝‍👩🏽','👩🏻‍🤝‍👩🏾','👩🏻‍🤝‍👩🏿','👩🏼‍🤝‍👩🏻','👩🏼‍🤝‍👩🏽','👩🏼‍🤝‍👩🏾','👩🏼‍🤝‍👩🏿','👩🏽‍🤝‍👩🏻','👩🏽‍🤝‍👩🏼','👩🏽‍🤝‍👩🏾','👩🏽‍🤝‍👩🏿','👩🏾‍🤝‍👩🏻','👩🏾‍🤝‍👩🏼','👩🏾‍🤝‍👩🏽','👩🏾‍🤝‍👩🏿','👩🏿‍🤝‍👩🏻','👩🏿‍🤝‍👩🏼','👩🏿‍🤝‍👩🏽','👩🏿‍🤝‍👩🏾','👩🏻‍🤝‍👨🏼','👩🏻‍🤝‍👨🏽','👩🏻‍🤝‍👨🏾','👩🏻‍🤝‍👨🏿','👩🏼‍🤝‍👨🏻','👩🏼‍🤝‍👨🏽','👩🏼‍🤝‍👨🏾','👩🏼‍🤝‍👨🏿','👩🏽‍🤝‍👨🏻','👩🏽‍🤝‍👨🏼','👩🏽‍🤝‍👨🏾','👩🏽‍🤝‍👨🏿','👩🏾‍🤝‍👨🏻','👩🏾‍🤝‍👨🏼','👩🏾‍🤝‍👨🏽','👩🏾‍🤝‍👨🏿','👩🏿‍🤝‍👨🏻','👩🏿‍🤝‍👨🏼','👩🏿‍🤝‍👨🏽','👩🏿‍🤝‍👨🏾','👨🏻‍🤝‍👨🏼','👨🏻‍🤝‍👨🏽',
            '👨🏻‍🤝‍👨🏾','👨🏻‍🤝‍👨🏿','👨🏼‍🤝‍👨🏻','👨🏼‍🤝‍👨🏽','👨🏼‍🤝‍👨🏾','👨🏼‍🤝‍👨🏿','👨🏽‍🤝‍👨🏻','👨🏽‍🤝‍👨🏼','👨🏽‍🤝‍👨🏾','👨🏽‍🤝‍👨🏿','👨🏾‍🤝‍👨🏻','👨🏾‍🤝‍👨🏼','👨🏾‍🤝‍👨🏽','👨🏾‍🤝‍👨🏿','👨🏿‍🤝‍👨🏻','👨🏿‍🤝‍👨🏼','👨🏿‍🤝‍👨🏽','👨🏿‍🤝‍👨🏾','🧑🏻‍❤️‍🧑🏼','🧑🏻‍❤️‍🧑🏽','🧑🏻‍❤️‍🧑🏾','🧑🏻‍❤️‍🧑🏿','🧑🏼‍❤️‍🧑🏻','🧑🏼‍❤️‍🧑🏽','🧑🏼‍❤️‍🧑🏾','🧑🏼‍❤️‍🧑🏿','🧑🏽‍❤️‍🧑🏻','🧑🏽‍❤️‍🧑🏼','🧑🏽‍❤️‍🧑🏾','🧑🏽‍❤️‍🧑🏿','🧑🏾‍❤️‍🧑🏻','🧑🏾‍❤️‍🧑🏼','🧑🏾‍❤️‍🧑🏽','🧑🏾‍❤️‍🧑🏿','🧑🏿‍❤️‍🧑🏻','🧑🏿‍❤️‍🧑🏼','🧑🏿‍❤️‍🧑🏽','🧑🏿‍❤️‍🧑🏾','👩🏻‍❤️‍👨🏻','👩🏻‍❤️‍👨🏼','👩🏻‍❤️‍👨🏽','👩🏻‍❤️‍👨🏾','👩🏻‍❤️‍👨🏿','👩🏼‍❤️‍👨🏻','👩🏼‍❤️‍👨🏼','👩🏼‍❤️‍👨🏽','👩🏼‍❤️‍👨🏾','👩🏼‍❤️‍👨🏿','👩🏽‍❤️‍👨🏻','👩🏽‍❤️‍👨🏼','👩🏽‍❤️‍👨🏽','👩🏽‍❤️‍👨🏾','👩🏽‍❤️‍👨🏿','👩🏾‍❤️‍👨🏻','👩🏾‍❤️‍👨🏼','👩🏾‍❤️‍👨🏽','👩🏾‍❤️‍👨🏾','👩🏾‍❤️‍👨🏿','👩🏿‍❤️‍👨🏻','👩🏿‍❤️‍👨🏼','👩🏿‍❤️‍👨🏽','👩🏿‍❤️‍👨🏾','👩🏿‍❤️‍👨🏿','👨🏻‍❤️‍👨🏻','👨🏻‍❤️‍👨🏼','👨🏻‍❤️‍👨🏽','👨🏻‍❤️‍👨🏾','👨🏻‍❤️‍👨🏿','👨🏼‍❤️‍👨🏻','👨🏼‍❤️‍👨🏼','👨🏼‍❤️‍👨🏽','👨🏼‍❤️‍👨🏾','👨🏼‍❤️‍👨🏿','👨🏽‍❤️‍👨🏻','👨🏽‍❤️‍👨🏼','👨🏽‍❤️‍👨🏽','👨🏽‍❤️‍👨🏾','👨🏽‍❤️‍👨🏿','👨🏾‍❤️‍👨🏻','👨🏾‍❤️‍👨🏼','👨🏾‍❤️‍👨🏽','👨🏾‍❤️‍👨🏾','👨🏾‍❤️‍👨🏿','👨🏿‍❤️‍👨🏻','👨🏿‍❤️‍👨🏼','👨🏿‍❤️‍👨🏽','👨🏿‍❤️‍👨🏾','👨🏿‍❤️‍👨🏿','👩🏻‍❤️‍👩🏻','👩🏻‍❤️‍👩🏼','👩🏻‍❤️‍👩🏽','👩🏻‍❤️‍👩🏾','👩🏻‍❤️‍👩🏿','👩🏼‍❤️‍👩🏻','👩🏼‍❤️‍👩🏼','👩🏼‍❤️‍👩🏽','👩🏼‍❤️‍👩🏾','👩🏼‍❤️‍👩🏿','👩🏽‍❤️‍👩🏻','👩🏽‍❤️‍👩🏼','👩🏽‍❤️‍👩🏽','👩🏽‍❤️‍👩🏾','👩🏽‍❤️‍👩🏿','👩🏾‍❤️‍👩🏻','👩🏾‍❤️‍👩🏼','👩🏾‍❤️‍👩🏽','👩🏾‍❤️‍👩🏾','👩🏾‍❤️‍👩🏿','👩🏿‍❤️‍👩🏻','👩🏿‍❤️‍👩🏼','👩🏿‍❤️‍👩🏽','👩🏿‍❤️‍👩🏾','👩🏿‍❤️‍👩🏿','👩‍❤️‍💋‍👨','👨‍❤️‍💋‍👨','👩‍❤️‍💋‍👩','👨‍👩‍👧‍👦','👨‍👩‍👦‍👦','👨‍👩‍👧‍👧','👨‍👨‍👧‍👦','👨‍👨‍👦‍👦','👨‍👨‍👧‍👧','👩‍👩‍👧‍👦','👩‍👩‍👦‍👦','👩‍👩‍👧‍👧','🧑‍🤝‍🧑','👩‍❤️‍👨','👨‍❤️‍👨','👩‍❤️‍👩','👨‍👩‍👦','👨‍👩‍👧','👨‍👨‍👦','👨‍👨‍👧','👩‍👩‍👦','👩‍👩‍👧','👨‍👦‍👦','👨‍👧‍👦','👨‍👧‍👧','👩‍👦‍👦','👩‍👧‍👦','👩‍👧‍👧','👁️‍🗨️','🧔🏻‍♂️','🧔🏼‍♂️','🧔🏽‍♂️','🧔🏾‍♂️','🧔🏿‍♂️','🧔🏻‍♀️','🧔🏼‍♀️','🧔🏽‍♀️','🧔🏾‍♀️','🧔🏿‍♀️','👨🏻‍🦰','👨🏼‍🦰','👨🏽‍🦰','👨🏾‍🦰','👨🏿‍🦰','👨🏻‍🦱','👨🏼‍🦱','👨🏽‍🦱','👨🏾‍🦱','👨🏿‍🦱','👨🏻‍🦳','👨🏼‍🦳','👨🏽‍🦳','👨🏾‍🦳','👨🏿‍🦳','👨🏻‍🦲','👨🏼‍🦲','👨🏽‍🦲','👨🏾‍🦲','👨🏿‍🦲',
            '👩🏻‍🦰','👩🏼‍🦰','👩🏽‍🦰','👩🏾‍🦰','👩🏿‍🦰','🧑🏻‍🦰','🧑🏼‍🦰','🧑🏽‍🦰','🧑🏾‍🦰','🧑🏿‍🦰','👩🏻‍🦱','👩🏼‍🦱','👩🏽‍🦱','👩🏾‍🦱','👩🏿‍🦱','🧑🏻‍🦱','🧑🏼‍🦱','🧑🏽‍🦱','🧑🏾‍🦱','🧑🏿‍🦱','👩🏻‍🦳','👩🏼‍🦳','👩🏽‍🦳','👩🏾‍🦳','👩🏿‍🦳','🧑🏻‍🦳','🧑🏼‍🦳','🧑🏽‍🦳','🧑🏾‍🦳','🧑🏿‍🦳','👩🏻‍🦲','👩🏼‍🦲','👩🏽‍🦲','👩🏾‍🦲','👩🏿‍🦲','🧑🏻‍🦲','🧑🏼‍🦲','🧑🏽‍🦲','🧑🏾‍🦲','🧑🏿‍🦲','👱🏻‍♀️','👱🏼‍♀️','👱🏽‍♀️','👱🏾‍♀️','👱🏿‍♀️','👱🏻‍♂️','👱🏼‍♂️','👱🏽‍♂️','👱🏾‍♂️','👱🏿‍♂️','🙍🏻‍♂️','🙍🏼‍♂️','🙍🏽‍♂️','🙍🏾‍♂️','🙍🏿‍♂️','🙍🏻‍♀️','🙍🏼‍♀️','🙍🏽‍♀️','🙍🏾‍♀️','🙍🏿‍♀️','🙎🏻‍♂️','🙎🏼‍♂️','🙎🏽‍♂️','🙎🏾‍♂️','🙎🏿‍♂️','🙎🏻‍♀️','🙎🏼‍♀️','🙎🏽‍♀️','🙎🏾‍♀️','🙎🏿‍♀️','🙅🏻‍♂️','🙅🏼‍♂️','🙅🏽‍♂️','🙅🏾‍♂️','🙅🏿‍♂️','🙅🏻‍♀️','🙅🏼‍♀️','🙅🏽‍♀️','🙅🏾‍♀️','🙅🏿‍♀️','🙆🏻‍♂️','🙆🏼‍♂️','🙆🏽‍♂️','🙆🏾‍♂️','🙆🏿‍♂️','🙆🏻‍♀️','🙆🏼‍♀️','🙆🏽‍♀️','🙆🏾‍♀️','🙆🏿‍♀️','💁🏻‍♂️','💁🏼‍♂️','💁🏽‍♂️','💁🏾‍♂️','💁🏿‍♂️','💁🏻‍♀️','💁🏼‍♀️','💁🏽‍♀️','💁🏾‍♀️','💁🏿‍♀️','🙋🏻‍♂️','🙋🏼‍♂️','🙋🏽‍♂️','🙋🏾‍♂️','🙋🏿‍♂️','🙋🏻‍♀️','🙋🏼‍♀️','🙋🏽‍♀️','🙋🏾‍♀️','🙋🏿‍♀️','🧏🏻‍♂️','🧏🏼‍♂️','🧏🏽‍♂️','🧏🏾‍♂️','🧏🏿‍♂️','🧏🏻‍♀️','🧏🏼‍♀️','🧏🏽‍♀️','🧏🏾‍♀️','🧏🏿‍♀️','🙇🏻‍♂️','🙇🏼‍♂️','🙇🏽‍♂️','🙇🏾‍♂️','🙇🏿‍♂️','🙇🏻‍♀️','🙇🏼‍♀️','🙇🏽‍♀️','🙇🏾‍♀️','🙇🏿‍♀️','🤦🏻‍♂️','🤦🏼‍♂️','🤦🏽‍♂️','🤦🏾‍♂️','🤦🏿‍♂️','🤦🏻‍♀️','🤦🏼‍♀️','🤦🏽‍♀️','🤦🏾‍♀️','🤦🏿‍♀️','🤷🏻‍♂️','🤷🏼‍♂️','🤷🏽‍♂️','🤷🏾‍♂️','🤷🏿‍♂️','🤷🏻‍♀️','🤷🏼‍♀️','🤷🏽‍♀️','🤷🏾‍♀️','🤷🏿‍♀️','🧑🏻‍⚕️','🧑🏼‍⚕️','🧑🏽‍⚕️','🧑🏾‍⚕️','🧑🏿‍⚕️','👨🏻‍⚕️','👨🏼‍⚕️','👨🏽‍⚕️','👨🏾‍⚕️','👨🏿‍⚕️','👩🏻‍⚕️','👩🏼‍⚕️','👩🏽‍⚕️','👩🏾‍⚕️','👩🏿‍⚕️','🧑🏻‍🎓','🧑🏼‍🎓','🧑🏽‍🎓','🧑🏾‍🎓','🧑🏿‍🎓','👨🏻‍🎓','👨🏼‍🎓','👨🏽‍🎓','👨🏾‍🎓','👨🏿‍🎓','👩🏻‍🎓','👩🏼‍🎓','👩🏽‍🎓','👩🏾‍🎓','👩🏿‍🎓','🧑🏻‍🏫','🧑🏼‍🏫','🧑🏽‍🏫','🧑🏾‍🏫','🧑🏿‍🏫','👨🏻‍🏫','👨🏼‍🏫','👨🏽‍🏫','👨🏾‍🏫','👨🏿‍🏫','👩🏻‍🏫','👩🏼‍🏫','👩🏽‍🏫','👩🏾‍🏫','👩🏿‍🏫','🧑🏻‍⚖️','🧑🏼‍⚖️','🧑🏽‍⚖️','🧑🏾‍⚖️','🧑🏿‍⚖️','👨🏻‍⚖️','👨🏼‍⚖️','👨🏽‍⚖️','👨🏾‍⚖️','👨🏿‍⚖️','👩🏻‍⚖️','👩🏼‍⚖️','👩🏽‍⚖️','👩🏾‍⚖️','👩🏿‍⚖️','🧑🏻‍🌾','🧑🏼‍🌾','🧑🏽‍🌾','🧑🏾‍🌾','🧑🏿‍🌾',
            '👨🏻‍🌾','👨🏼‍🌾','👨🏽‍🌾','👨🏾‍🌾','👨🏿‍🌾','👩🏻‍🌾','👩🏼‍🌾','👩🏽‍🌾','👩🏾‍🌾','👩🏿‍🌾','🧑🏻‍🍳','🧑🏼‍🍳','🧑🏽‍🍳','🧑🏾‍🍳','🧑🏿‍🍳','👨🏻‍🍳','👨🏼‍🍳','👨🏽‍🍳','👨🏾‍🍳','👨🏿‍🍳','👩🏻‍🍳','👩🏼‍🍳','👩🏽‍🍳','👩🏾‍🍳','👩🏿‍🍳','🧑🏻‍🔧','🧑🏼‍🔧','🧑🏽‍🔧','🧑🏾‍🔧','🧑🏿‍🔧','👨🏻‍🔧','👨🏼‍🔧','👨🏽‍🔧','👨🏾‍🔧','👨🏿‍🔧','👩🏻‍🔧','👩🏼‍🔧','👩🏽‍🔧','👩🏾‍🔧','👩🏿‍🔧','🧑🏻‍🏭','🧑🏼‍🏭','🧑🏽‍🏭','🧑🏾‍🏭','🧑🏿‍🏭','👨🏻‍🏭','👨🏼‍🏭','👨🏽‍🏭','👨🏾‍🏭','👨🏿‍🏭','👩🏻‍🏭','👩🏼‍🏭','👩🏽‍🏭','👩🏾‍🏭','👩🏿‍🏭','🧑🏻‍💼','🧑🏼‍💼','🧑🏽‍💼','🧑🏾‍💼','🧑🏿‍💼','👨🏻‍💼','👨🏼‍💼','👨🏽‍💼','👨🏾‍💼','👨🏿‍💼','👩🏻‍💼','👩🏼‍💼','👩🏽‍💼','👩🏾‍💼','👩🏿‍💼','🧑🏻‍🔬','🧑🏼‍🔬','🧑🏽‍🔬','🧑🏾‍🔬','🧑🏿‍🔬','👨🏻‍🔬','👨🏼‍🔬','👨🏽‍🔬','👨🏾‍🔬','👨🏿‍🔬','👩🏻‍🔬','👩🏼‍🔬','👩🏽‍🔬','👩🏾‍🔬','👩🏿‍🔬','🧑🏻‍💻','🧑🏼‍💻','🧑🏽‍💻','🧑🏾‍💻','🧑🏿‍💻','👨🏻‍💻','👨🏼‍💻','👨🏽‍💻','👨🏾‍💻','👨🏿‍💻','👩🏻‍💻','👩🏼‍💻','👩🏽‍💻','👩🏾‍💻','👩🏿‍💻','🧑🏻‍🎤','🧑🏼‍🎤','🧑🏽‍🎤','🧑🏾‍🎤','🧑🏿‍🎤','👨🏻‍🎤','👨🏼‍🎤',
            '👨🏽‍🎤','👨🏾‍🎤','👨🏿‍🎤','👩🏻‍🎤','👩🏼‍🎤','👩🏽‍🎤','👩🏾‍🎤','👩🏿‍🎤','🧑🏻‍🎨','🧑🏼‍🎨','🧑🏽‍🎨','🧑🏾‍🎨','🧑🏿‍🎨','👨🏻‍🎨','👨🏼‍🎨','👨🏽‍🎨','👨🏾‍🎨','👨🏿‍🎨','👩🏻‍🎨','👩🏼‍🎨','👩🏽‍🎨','👩🏾‍🎨','👩🏿‍🎨','🧑🏻‍✈️','🧑🏼‍✈️','🧑🏽‍✈️','🧑🏾‍✈️','🧑🏿‍✈️','👨🏻‍✈️','👨🏼‍✈️','👨🏽‍✈️','👨🏾‍✈️','👨🏿‍✈️','👩🏻‍✈️','👩🏼‍✈️','👩🏽‍✈️','👩🏾‍✈️','👩🏿‍✈️','🧑🏻‍🚀','🧑🏼‍🚀','🧑🏽‍🚀','🧑🏾‍🚀','🧑🏿‍🚀','👨🏻‍🚀','👨🏼‍🚀','👨🏽‍🚀','👨🏾‍🚀','👨🏿‍🚀','👩🏻‍🚀','👩🏼‍🚀','👩🏽‍🚀','👩🏾‍🚀','👩🏿‍🚀','🧑🏻‍🚒','🧑🏼‍🚒','🧑🏽‍🚒','🧑🏾‍🚒','🧑🏿‍🚒','👨🏻‍🚒','👨🏼‍🚒','👨🏽‍🚒','👨🏾‍🚒','👨🏿‍🚒','👩🏻‍🚒','👩🏼‍🚒','👩🏽‍🚒','👩🏾‍🚒','👩🏿‍🚒','👮🏻‍♂️','👮🏼‍♂️','👮🏽‍♂️','👮🏾‍♂️','👮🏿‍♂️','👮🏻‍♀️','👮🏼‍♀️','👮🏽‍♀️','👮🏾‍♀️','👮🏿‍♀️','🕵🏻‍♂️','🕵🏼‍♂️','🕵🏽‍♂️','🕵🏾‍♂️','🕵🏿‍♂️','🕵🏻‍♀️','🕵🏼‍♀️','🕵🏽‍♀️','🕵🏾‍♀️','🕵🏿‍♀️','💂🏻‍♂️','💂🏼‍♂️','💂🏽‍♂️','💂🏾‍♂️','💂🏿‍♂️','💂🏻‍♀️','💂🏼‍♀️','💂🏽‍♀️','💂🏾‍♀️','💂🏿‍♀️','👷🏻‍♂️','👷🏼‍♂️','👷🏽‍♂️','👷🏾‍♂️','👷🏿‍♂️','👷🏻‍♀️','👷🏼‍♀️','👷🏽‍♀️','👷🏾‍♀️','👷🏿‍♀️','👳🏻‍♂️','👳🏼‍♂️','👳🏽‍♂️','👳🏾‍♂️','👳🏿‍♂️','👳🏻‍♀️','👳🏼‍♀️','👳🏽‍♀️','👳🏾‍♀️','👳🏿‍♀️','🤵🏻‍♂️','🤵🏼‍♂️','🤵🏽‍♂️','🤵🏾‍♂️','🤵🏿‍♂️','🤵🏻‍♀️','🤵🏼‍♀️','🤵🏽‍♀️','🤵🏾‍♀️','🤵🏿‍♀️','👰🏻‍♂️','👰🏼‍♂️','👰🏽‍♂️','👰🏾‍♂️','👰🏿‍♂️','👰🏻‍♀️','👰🏼‍♀️','👰🏽‍♀️','👰🏾‍♀️','👰🏿‍♀️','👩🏻‍🍼','👩🏼‍🍼','👩🏽‍🍼','👩🏾‍🍼','👩🏿‍🍼','👨🏻‍🍼','👨🏼‍🍼','👨🏽‍🍼','👨🏾‍🍼','👨🏿‍🍼','🧑🏻‍🍼','🧑🏼‍🍼','🧑🏽‍🍼','🧑🏾‍🍼','🧑🏿‍🍼','🧑🏻‍🎄','🧑🏼‍🎄','🧑🏽‍🎄','🧑🏾‍🎄','🧑🏿‍🎄','🦸🏻‍♂️','🦸🏼‍♂️','🦸🏽‍♂️','🦸🏾‍♂️','🦸🏿‍♂️','🦸🏻‍♀️','🦸🏼‍♀️','🦸🏽‍♀️',
            '🦸🏾‍♀️','🦸🏿‍♀️','🦹🏻‍♂️','🦹🏼‍♂️','🦹🏽‍♂️','🦹🏾‍♂️','🦹🏿‍♂️','🦹🏻‍♀️','🦹🏼‍♀️','🦹🏽‍♀️','🦹🏾‍♀️','🦹🏿‍♀️','🧙🏻‍♂️','🧙🏼‍♂️','🧙🏽‍♂️','🧙🏾‍♂️','🧙🏿‍♂️','🧙🏻‍♀️','🧙🏼‍♀️','🧙🏽‍♀️','🧙🏾‍♀️','🧙🏿‍♀️','🧚🏻‍♂️','🧚🏼‍♂️','🧚🏽‍♂️','🧚🏾‍♂️','🧚🏿‍♂️','🧚🏻‍♀️','🧚🏼‍♀️','🧚🏽‍♀️','🧚🏾‍♀️','🧚🏿‍♀️','🧛🏻‍♂️','🧛🏼‍♂️','🧛🏽‍♂️','🧛🏾‍♂️','🧛🏿‍♂️','🧛🏻‍♀️','🧛🏼‍♀️','🧛🏽‍♀️','🧛🏾‍♀️','🧛🏿‍♀️','🧜🏻‍♂️','🧜🏼‍♂️','🧜🏽‍♂️','🧜🏾‍♂️','🧜🏿‍♂️','🧜🏻‍♀️','🧜🏼‍♀️','🧜🏽‍♀️','🧜🏾‍♀️','🧜🏿‍♀️','🧝🏻‍♂️','🧝🏼‍♂️','🧝🏽‍♂️','🧝🏾‍♂️','🧝🏿‍♂️','🧝🏻‍♀️','🧝🏼‍♀️','🧝🏽‍♀️','🧝🏾‍♀️','🧝🏿‍♀️','💆🏻‍♂️','💆🏼‍♂️','💆🏽‍♂️','💆🏾‍♂️','💆🏿‍♂️','💆🏻‍♀️','💆🏼‍♀️','💆🏽‍♀️','💆🏾‍♀️','💆🏿‍♀️','💇🏻‍♂️','💇🏼‍♂️','💇🏽‍♂️','💇🏾‍♂️','💇🏿‍♂️','💇🏻‍♀️','💇🏼‍♀️','💇🏽‍♀️','💇🏾‍♀️','💇🏿‍♀️','🚶🏻‍♂️','🚶🏼‍♂️','🚶🏽‍♂️','🚶🏾‍♂️','🚶🏿‍♂️','🚶🏻‍♀️','🚶🏼‍♀️','🚶🏽‍♀️','🚶🏾‍♀️','🚶🏿‍♀️','🧍🏻‍♂️','🧍🏼‍♂️','🧍🏽‍♂️','🧍🏾‍♂️','🧍🏿‍♂️','🧍🏻‍♀️','🧍🏼‍♀️','🧍🏽‍♀️','🧍🏾‍♀️','🧍🏿‍♀️','🧎🏻‍♂️','🧎🏼‍♂️','🧎🏽‍♂️','🧎🏾‍♂️','🧎🏿‍♂️','🧎🏻‍♀️','🧎🏼‍♀️','🧎🏽‍♀️','🧎🏾‍♀️','🧎🏿‍♀️','🧑🏻‍🦯','🧑🏼‍🦯','🧑🏽‍🦯','🧑🏾‍🦯','🧑🏿‍🦯','👨🏻‍🦯','👨🏼‍🦯','👨🏽‍🦯','👨🏾‍🦯','👨🏿‍🦯','👩🏻‍🦯','👩🏼‍🦯','👩🏽‍🦯','👩🏾‍🦯','👩🏿‍🦯','🧑🏻‍🦼','🧑🏼‍🦼','🧑🏽‍🦼','🧑🏾‍🦼','🧑🏿‍🦼','👨🏻‍🦼','👨🏼‍🦼','👨🏽‍🦼','👨🏾‍🦼','👨🏿‍🦼','👩🏻‍🦼','👩🏼‍🦼','👩🏽‍🦼','👩🏾‍🦼','👩🏿‍🦼','🧑🏻‍🦽','🧑🏼‍🦽','🧑🏽‍🦽','🧑🏾‍🦽','🧑🏿‍🦽','👨🏻‍🦽','👨🏼‍🦽','👨🏽‍🦽','👨🏾‍🦽','👨🏿‍🦽','👩🏻‍🦽','👩🏼‍🦽','👩🏽‍🦽','👩🏾‍🦽','👩🏿‍🦽','🏃🏻‍♂️','🏃🏼‍♂️','🏃🏽‍♂️','🏃🏾‍♂️','🏃🏿‍♂️','🏃🏻‍♀️','🏃🏼‍♀️','🏃🏽‍♀️','🏃🏾‍♀️','🏃🏿‍♀️','🧖🏻‍♂️','🧖🏼‍♂️','🧖🏽‍♂️','🧖🏾‍♂️','🧖🏿‍♂️','🧖🏻‍♀️','🧖🏼‍♀️','🧖🏽‍♀️','🧖🏾‍♀️','🧖🏿‍♀️','🧗🏻‍♂️','🧗🏼‍♂️','🧗🏽‍♂️',
            '🧗🏾‍♂️','🧗🏿‍♂️','🧗🏻‍♀️','🧗🏼‍♀️','🧗🏽‍♀️','🧗🏾‍♀️','🧗🏿‍♀️','🏌🏻‍♂️','🏌🏼‍♂️','🏌🏽‍♂️','🏌🏾‍♂️','🏌🏿‍♂️','🏌🏻‍♀️','🏌🏼‍♀️','🏌🏽‍♀️','🏌🏾‍♀️','🏌🏿‍♀️','🏄🏻‍♂️','🏄🏼‍♂️','🏄🏽‍♂️','🏄🏾‍♂️','🏄🏿‍♂️','🏄🏻‍♀️','🏄🏼‍♀️','🏄🏽‍♀️','🏄🏾‍♀️','🏄🏿‍♀️','🚣🏻‍♂️','🚣🏼‍♂️','🚣🏽‍♂️','🚣🏾‍♂️','🚣🏿‍♂️','🚣🏻‍♀️','🚣🏼‍♀️','🚣🏽‍♀️','🚣🏾‍♀️','🚣🏿‍♀️','🏊🏻‍♂️','🏊🏼‍♂️','🏊🏽‍♂️','🏊🏾‍♂️','🏊🏿‍♂️','🏊🏻‍♀️','🏊🏼‍♀️','🏊🏽‍♀️','🏊🏾‍♀️','🏊🏿‍♀️','🏋🏻‍♂️','🏋🏼‍♂️','🏋🏽‍♂️','🏋🏾‍♂️','🏋🏿‍♂️','🏋🏻‍♀️','🏋🏼‍♀️','🏋🏽‍♀️','🏋🏾‍♀️','🏋🏿‍♀️','🚴🏻‍♂️','🚴🏼‍♂️','🚴🏽‍♂️','🚴🏾‍♂️','🚴🏿‍♂️','🚴🏻‍♀️','🚴🏼‍♀️','🚴🏽‍♀️','🚴🏾‍♀️','🚴🏿‍♀️','🚵🏻‍♂️','🚵🏼‍♂️','🚵🏽‍♂️','🚵🏾‍♂️','🚵🏿‍♂️','🚵🏻‍♀️','🚵🏼‍♀️','🚵🏽‍♀️','🚵🏾‍♀️','🚵🏿‍♀️','🤸🏻‍♂️','🤸🏼‍♂️','🤸🏽‍♂️','🤸🏾‍♂️','🤸🏿‍♂️','🤸🏻‍♀️','🤸🏼‍♀️','🤸🏽‍♀️','🤸🏾‍♀️','🤸🏿‍♀️','🤽🏻‍♂️','🤽🏼‍♂️','🤽🏽‍♂️','🤽🏾‍♂️','🤽🏿‍♂️','🤽🏻‍♀️','🤽🏼‍♀️','🤽🏽‍♀️','🤽🏾‍♀️','🤽🏿‍♀️','🤾🏻‍♂️','🤾🏼‍♂️','🤾🏽‍♂️','🤾🏾‍♂️','🤾🏿‍♂️','🤾🏻‍♀️','🤾🏼‍♀️','🤾🏽‍♀️','🤾🏾‍♀️','🤾🏿‍♀️','🤹🏻‍♂️','🤹🏼‍♂️','🤹🏽‍♂️','🤹🏾‍♂️','🤹🏿‍♂️','🤹🏻‍♀️','🤹🏼‍♀️','🤹🏽‍♀️','🤹🏾‍♀️','🤹🏿‍♀️','🧘🏻‍♂️','🧘🏼‍♂️','🧘🏽‍♂️','🧘🏾‍♂️','🧘🏿‍♂️','🧘🏻‍♀️','🧘🏼‍♀️','🧘🏽‍♀️','🧘🏾‍♀️','🧘🏿‍♀️','😶‍🌫️','🕵️‍♂️','🕵️‍♀️','🏌️‍♂️','🏌️‍♀️','🏋️‍♂️','🏋️‍♀️','🏳️‍🌈','🏳️‍⚧️','⛹🏻‍♂️','⛹🏼‍♂️','⛹🏽‍♂️','⛹🏾‍♂️','⛹🏿‍♂️','⛹🏻‍♀️','⛹🏼‍♀️','⛹🏽‍♀️','⛹🏾‍♀️','⛹🏿‍♀️','😮‍💨','😵‍💫','❤️‍🔥','❤️‍🩹','🧔‍♂️','🧔‍♀️','👨‍🦰','👨‍🦱','👨‍🦳','👨‍🦲','👩‍🦰','🧑‍🦰','👩‍🦱','🧑‍🦱','👩‍🦳','🧑‍🦳','👩‍🦲','🧑‍🦲','👱‍♀️','👱‍♂️','🙍‍♂️','🙍‍♀️','🙎‍♂️','🙎‍♀️','🙅‍♂️','🙅‍♀️','🙆‍♂️','🙆‍♀️','💁‍♂️','💁‍♀️','🙋‍♂️','🙋‍♀️','🧏‍♂️','🧏‍♀️','🙇‍♂️','🙇‍♀️','🤦‍♂️','🤦‍♀️','🤷‍♂️','🤷‍♀️','🧑‍⚕️','👨‍⚕️','👩‍⚕️','🧑‍🎓','👨‍🎓','👩‍🎓','🧑‍🏫','👨‍🏫','👩‍🏫','🧑‍⚖️','👨‍⚖️','👩‍⚖️','🧑‍🌾','👨‍🌾','👩‍🌾','🧑‍🍳','👨‍🍳','👩‍🍳','🧑‍🔧','👨‍🔧','👩‍🔧','🧑‍🏭','👨‍🏭','👩‍🏭','🧑‍💼','👨‍💼','👩‍💼','🧑‍🔬','👨‍🔬','👩‍🔬',
            '🧑‍💻','👨‍💻','👩‍💻','🧑‍🎤','👨‍🎤','👩‍🎤','🧑‍🎨','👨‍🎨','👩‍🎨','🧑‍✈️','👨‍✈️','👩‍✈️','🧑‍🚀','👨‍🚀','👩‍🚀','🧑‍🚒','👨‍🚒','👩‍🚒','👮‍♂️','👮‍♀️','💂‍♂️','💂‍♀️','👷‍♂️','👷‍♀️','👳‍♂️','👳‍♀️','🤵‍♂️','🤵‍♀️','👰‍♂️','👰‍♀️','👩‍🍼','👨‍🍼','🧑‍🍼','🧑‍🎄','🦸‍♂️','🦸‍♀️','🦹‍♂️','🦹‍♀️','🧙‍♂️','🧙‍♀️','🧚‍♂️','🧚‍♀️','🧛‍♂️','🧛‍♀️','🧜‍♂️','🧜‍♀️','🧝‍♂️','🧝‍♀️','🧞‍♂️','🧞‍♀️','🧟‍♂️','🧟‍♀️','💆‍♂️','💆‍♀️','💇‍♂️','💇‍♀️','🚶‍♂️','🚶‍♀️','🧍‍♂️','🧍‍♀️','🧎‍♂️','🧎‍♀️','🧑‍🦯','👨‍🦯','👩‍🦯','🧑‍🦼','👨‍🦼','👩‍🦼','🧑‍🦽','👨‍🦽','👩‍🦽','🏃‍♂️','🏃‍♀️','👯‍♂️','👯‍♀️','🧖‍♂️','🧖‍♀️','🧗‍♂️','🧗‍♀️','🏄‍♂️','🏄‍♀️','🚣‍♂️','🚣‍♀️','🏊‍♂️','🏊‍♀️','⛹️‍♂️','⛹️‍♀️','🚴‍♂️','🚴‍♀️','🚵‍♂️','🚵‍♀️','🤸‍♂️','🤸‍♀️','🤼‍♂️','🤼‍♀️','🤽‍♂️','🤽‍♀️','🤾‍♂️','🤾‍♀️','🤹‍♂️','🤹‍♀️','🧘‍♂️','🧘‍♀️','👨‍👦','👨‍👧','👩‍👦','👩‍👧','🐕‍🦺','🐻‍❄️','🏴‍☠️','🐈‍⬛','🇦🇨','🇦🇩','🇦🇪','🇦🇫','🇦🇬','🇦🇮','🇦🇱','🇦🇲','🇦🇴','🇦🇶','🇦🇷','🇦🇸','🇦🇹','🇦🇺','🇦🇼','🇦🇽','🇦🇿','🇧🇦','🇧🇧','🇧🇩','🇧🇪','🇧🇫','🇧🇬','🇧🇭','🇧🇮','🇧🇯','🇧🇱','🇧🇲','🇧🇳','🇧🇴','🇧🇶','🇧🇷','🇧🇸','🇧🇹','🇧🇻','🇧🇼','🇧🇾','🇧🇿','🇨🇦','🇨🇨','🇨🇩','🇨🇫','🇨🇬','🇨🇭','🇨🇮','🇨🇰','🇨🇱','🇨🇲','🇨🇳','🇨🇴','🇨🇵','🇨🇷','🇨🇺','🇨🇻','🇨🇼','🇨🇽','🇨🇾','🇨🇿','🇩🇪','🇩🇬','🇩🇯','🇩🇰','🇩🇲','🇩🇴','🇩🇿','🇪🇦','🇪🇨','🇪🇪','🇪🇬','🇪🇭','🇪🇷','🇪🇸','🇪🇹','🇪🇺','🇫🇮','🇫🇯','🇫🇰','🇫🇲','🇫🇴','🇫🇷','🇬🇦','🇬🇧','🇬🇩','🇬🇪','🇬🇫','🇬🇬','🇬🇭','🇬🇮','🇬🇱','🇬🇲','🇬🇳','🇬🇵','🇬🇶','🇬🇷','🇬🇸','🇬🇹','🇬🇺','🇬🇼','🇬🇾','🇭🇰','🇭🇲','🇭🇳','🇭🇷','🇭🇹','🇭🇺',
            '🇮🇨','🇮🇩','🇮🇪','🇮🇱','🇮🇲','🇮🇳','🇮🇴','🇮🇶','🇮🇷','🇮🇸','🇮🇹','🇯🇪','🇯🇲','🇯🇴','🇯🇵','🇰🇪','🇰🇬','🇰🇭','🇰🇮','🇰🇲','🇰🇳','🇰🇵','🇰🇷','🇰🇼','🇰🇾','🇰🇿','🇱🇦','🇱🇧','🇱🇨','🇱🇮','🇱🇰','🇱🇷','🇱🇸','🇱🇹','🇱🇺','🇱🇻','🇱🇾','🇲🇦','🇲🇨','🇲🇩','🇲🇪','🇲🇫','🇲🇬','🇲🇭','🇲🇰','🇲🇱','🇲🇲','🇲🇳','🇲🇴','🇲🇵','🇲🇶','🇲🇷','🇲🇸','🇲🇹','🇲🇺','🇲🇻','🇲🇼','🇲🇽','🇲🇾','🇲🇿','🇳🇦','🇳🇨','🇳🇪','🇳🇫','🇳🇬','🇳🇮','🇳🇱','🇳🇴','🇳🇵','🇳🇷','🇳🇺','🇳🇿','🇴🇲','🇵🇦','🇵🇪','🇵🇫','🇵🇬','🇵🇭','🇵🇰','🇵🇱','🇵🇲','🇵🇳','🇵🇷','🇵🇸','🇵🇹','🇵🇼','🇵🇾','🇶🇦','🇷🇪','🇷🇴','🇷🇸','🇷🇺','🇷🇼','🇸🇦','🇸🇧','🇸🇨','🇸🇩','🇸🇪','🇸🇬','🇸🇭','🇸🇮','🇸🇯','🇸🇰','🇸🇱','🇸🇲','🇸🇳','🇸🇴','🇸🇷','🇸🇸','🇸🇹','🇸🇻','🇸🇽','🇸🇾','🇸🇿','🇹🇦','🇹🇨','🇹🇩','🇹🇫','🇹🇬','🇹🇭','🇹🇯','🇹🇰','🇹🇱','🇹🇲','🇹🇳','🇹🇴','🇹🇷','🇹🇹','🇹🇻','🇹🇼','🇹🇿','🇺🇦','🇺🇬','🇺🇲','🇺🇳','🇺🇸','🇺🇾','🇺🇿','🇻🇦','🇻🇨','🇻🇪','🇻🇬','🇻🇮','🇻🇳','🇻🇺','🇼🇫','🇼🇸','🇽🇰','🇾🇪','🇾🇹','🇿🇦','🇿🇲','🇿🇼','👋🏻','👋🏼','👋🏽','👋🏾','👋🏿','🤚🏻','🤚🏼','🤚🏽','🤚🏾','🤚🏿','🖐🏻','🖐🏼','🖐🏽','🖐🏾','🖐🏿','🖖🏻','🖖🏼','🖖🏽','🖖🏾','🖖🏿','👌🏻','👌🏼','👌🏽','👌🏾','👌🏿','🤌🏻','🤌🏼','🤌🏽','🤌🏾','🤌🏿','🤏🏻','🤏🏼','🤏🏽','🤏🏾','🤏🏿','🤞🏻','🤞🏼','🤞🏽','🤞🏾','🤞🏿','🤟🏻','🤟🏼','🤟🏽','🤟🏾','🤟🏿','🤘🏻','🤘🏼','🤘🏽','🤘🏾','🤘🏿','🤙🏻','🤙🏼','🤙🏽','🤙🏾','🤙🏿','👈🏻','👈🏼','👈🏽','👈🏾','👈🏿','👉🏻','👉🏼','👉🏽',
            '👉🏾','👉🏿','👆🏻','👆🏼','👆🏽','👆🏾','👆🏿','🖕🏻','🖕🏼','🖕🏽','🖕🏾','🖕🏿','👇🏻','👇🏼','👇🏽','👇🏾','👇🏿','👍🏻','👍🏼','👍🏽','👍🏾','👍🏿','👎🏻','👎🏼','👎🏽','👎🏾','👎🏿','👊🏻','👊🏼','👊🏽','👊🏾','👊🏿','🤛🏻','🤛🏼','🤛🏽','🤛🏾','🤛🏿','🤜🏻','🤜🏼','🤜🏽','🤜🏾','🤜🏿','👏🏻','👏🏼','👏🏽','👏🏾','👏🏿','🙌🏻','🙌🏼','🙌🏽','🙌🏾','🙌🏿','👐🏻','👐🏼','👐🏽','👐🏾','👐🏿','🤲🏻','🤲🏼','🤲🏽','🤲🏾','🤲🏿','🙏🏻','🙏🏼','🙏🏽','🙏🏾','🙏🏿','💅🏻','💅🏼','💅🏽','💅🏾','💅🏿','🤳🏻','🤳🏼','🤳🏽','🤳🏾','🤳🏿','💪🏻','💪🏼','💪🏽','💪🏾','💪🏿','🦵🏻','🦵🏼','🦵🏽','🦵🏾','🦵🏿','🦶🏻','🦶🏼','🦶🏽','🦶🏾','🦶🏿','👂🏻','👂🏼','👂🏽','👂🏾','👂🏿','🦻🏻','🦻🏼','🦻🏽','🦻🏾','🦻🏿','👃🏻','👃🏼','👃🏽','👃🏾','👃🏿','👶🏻','👶🏼','👶🏽','👶🏾','👶🏿','🧒🏻','🧒🏼','🧒🏽','🧒🏾','🧒🏿','👦🏻','👦🏼','👦🏽','👦🏾','👦🏿','👧🏻','👧🏼','👧🏽','👧🏾','👧🏿','🧑🏻','🧑🏼','🧑🏽','🧑🏾','🧑🏿','👱🏻','👱🏼','👱🏽','👱🏾','👱🏿','👨🏻','👨🏼','👨🏽','👨🏾','👨🏿','🧔🏻','🧔🏼','🧔🏽','🧔🏾','🧔🏿','👩🏻','👩🏼','👩🏽','👩🏾','👩🏿','🧓🏻','🧓🏼','🧓🏽','🧓🏾','🧓🏿','👴🏻','👴🏼','👴🏽','👴🏾','👴🏿','👵🏻','👵🏼','👵🏽','👵🏾','👵🏿','🙍🏻','🙍🏼','🙍🏽','🙍🏾','🙍🏿','🙎🏻','🙎🏼','🙎🏽','🙎🏾','🙎🏿','🙅🏻','🙅🏼','🙅🏽','🙅🏾','🙅🏿','🙆🏻','🙆🏼','🙆🏽','🙆🏾','🙆🏿','💁🏻','💁🏼','💁🏽','💁🏾','💁🏿','🙋🏻','🙋🏼','🙋🏽','🙋🏾','🙋🏿','🧏🏻','🧏🏼','🧏🏽','🧏🏾','🧏🏿','🙇🏻','🙇🏼','🙇🏽','🙇🏾','🙇🏿','🤦🏻','🤦🏼','🤦🏽','🤦🏾','🤦🏿','🤷🏻','🤷🏼','🤷🏽','🤷🏾',
            '🤷🏿','👮🏻','👮🏼','👮🏽','👮🏾','👮🏿','🕵🏻','🕵🏼','🕵🏽','🕵🏾','🕵🏿','💂🏻','💂🏼','💂🏽','💂🏾','💂🏿','🥷🏻','🥷🏼','🥷🏽','🥷🏾','🥷🏿','👷🏻','👷🏼','👷🏽','👷🏾','👷🏿','🤴🏻','🤴🏼','🤴🏽','🤴🏾','🤴🏿','👸🏻','👸🏼','👸🏽','👸🏾','👸🏿','👳🏻','👳🏼','👳🏽','👳🏾','👳🏿','👲🏻','👲🏼','👲🏽','👲🏾','👲🏿','🧕🏻','🧕🏼','🧕🏽','🧕🏾','🧕🏿',
            '🤵🏻','🤵🏼','🤵🏽','🤵🏾','🤵🏿','👰🏻','👰🏼','👰🏽','👰🏾','👰🏿','🤰🏻','🤰🏼','🤰🏽','🤰🏾','🤰🏿','🤱🏻','🤱🏼','🤱🏽','🤱🏾','🤱🏿','👼🏻','👼🏼','👼🏽','👼🏾','👼🏿','🎅🏻','🎅🏼','🎅🏽','🎅🏾','🎅🏿','🤶🏻','🤶🏼','🤶🏽','🤶🏾','🤶🏿','🦸🏻','🦸🏼','🦸🏽','🦸🏾','🦸🏿','🦹🏻','🦹🏼','🦹🏽','🦹🏾','🦹🏿','🧙🏻','🧙🏼','🧙🏽','🧙🏾','🧙🏿','🧚🏻','🧚🏼','🧚🏽','🧚🏾','🧚🏿','🧛🏻','🧛🏼','🧛🏽','🧛🏾','🧛🏿','🧜🏻','🧜🏼','🧜🏽','🧜🏾','🧜🏿','🧝🏻','🧝🏼','🧝🏽','🧝🏾','🧝🏿','💆🏻','💆🏼','💆🏽','💆🏾','💆🏿','💇🏻','💇🏼','💇🏽','💇🏾','💇🏿','🚶🏻','🚶🏼','🚶🏽','🚶🏾','🚶🏿','🧍🏻','🧍🏼','🧍🏽','🧍🏾','🧍🏿','🧎🏻','🧎🏼','🧎🏽','🧎🏾','🧎🏿','🏃🏻','🏃🏼','🏃🏽','🏃🏾','🏃🏿','💃🏻','💃🏼','💃🏽','💃🏾','💃🏿','🕺🏻','🕺🏼','🕺🏽','🕺🏾','🕺🏿','🕴🏻','🕴🏼','🕴🏽','🕴🏾','🕴🏿','🧖🏻','🧖🏼','🧖🏽','🧖🏾','🧖🏿','🧗🏻','🧗🏼','🧗🏽','🧗🏾','🧗🏿','🏇🏻','🏇🏼','🏇🏽','🏇🏾','🏇🏿','🏂🏻','🏂🏼','🏂🏽','🏂🏾','🏂🏿','🏌🏻','🏌🏼','🏌🏽','🏌🏾','🏌🏿','🏄🏻','🏄🏼','🏄🏽','🏄🏾','🏄🏿','🚣🏻','🚣🏼','🚣🏽','🚣🏾','🚣🏿','🏊🏻','🏊🏼','🏊🏽','🏊🏾','🏊🏿','🏋🏻','🏋🏼','🏋🏽','🏋🏾','🏋🏿','🚴🏻','🚴🏼','🚴🏽','🚴🏾','🚴🏿','🚵🏻','🚵🏼','🚵🏽','🚵🏾','🚵🏿','🤸🏻','🤸🏼','🤸🏽','🤸🏾','🤸🏿','🤽🏻','🤽🏼','🤽🏽','🤽🏾','🤽🏿','🤾🏻','🤾🏼','🤾🏽','🤾🏾','🤾🏿','🤹🏻','🤹🏼','🤹🏽','🤹🏾','🤹🏿','🧘🏻','🧘🏼','🧘🏽','🧘🏾','🧘🏿','🛀🏻','🛀🏼','🛀🏽','🛀🏾','🛀🏿','🛌🏻','🛌🏼','🛌🏽','🛌🏾','🛌🏿','👭🏻','👭🏼','👭🏽','👭🏾','👭🏿','👫🏻','👫🏼','👫🏽','👫🏾','👫🏿','👬🏻',
            '👬🏼','👬🏽','👬🏾','👬🏿','💏🏻','💏🏼','💏🏽','💏🏾','💏🏿','💑🏻','💑🏼','💑🏽','💑🏾','💑🏿','#️⃣','0️⃣','1️⃣','2️⃣','3️⃣','4️⃣','5️⃣','6️⃣','7️⃣','8️⃣','9️⃣','✋🏻','✋🏼','✋🏽','✋🏾','✋🏿','✌🏻','✌🏼','✌🏽','✌🏾','✌🏿','☝🏻','☝🏼','☝🏽','☝🏾','☝🏿','✊🏻','✊🏼','✊🏽','✊🏾','✊🏿','✍🏻','✍🏼','✍🏽','✍🏾','✍🏿','⛹🏻','⛹🏼','⛹🏽','⛹🏾','⛹🏿','😀','😃','😄','😁','😆','😅','🤣','😂','🙂','🙃','😉','😊','😇','🥰','😍','🤩','😘','😗','😚','😙','🥲','😋','😛','😜','🤪','😝','🤑','🤗','🤭','🤫','🤔','🤐','🤨','😐','😑','😶','😏','😒','🙄','😬','🤥','😌','😔','😪','🤤','😴','😷','🤒','🤕','🤢','🤮','🤧','🥵','🥶','🥴','😵','🤯','🤠','🥳','🥸','😎','🤓','🧐','😕','😟','🙁','😮','😯','😲','😳','🥺','😦','😧','😨','😰','😥','😢','😭','😱','😖','😣','😞','😓','😩','😫','🥱','😤','😡','😠','🤬','😈','👿','💀','💩','🤡',
            '👹','👺','👻','👽','👾','🤖','😺','😸','😹','😻','😼','😽','🙀','😿','😾','🙈','🙉','🙊','💋','💌','💘','💝','💖','💗','💓','💞','💕','💟','💔','🧡','💛','💚','💙','💜','🤎','🖤','🤍','💯','💢','💥','💫','💦','💨','🕳','💣','💬','🗨','🗯','💭','💤','👋','🤚','🖐','🖖','👌','🤌','🤏','🤞','🤟','🤘','🤙','👈','👉','👆','🖕','👇','👍','👎','👊','🤛','🤜','👏','🙌','👐','🤲','🤝','🙏','💅','🤳','💪','🦾','🦿','🦵','🦶','👂','🦻','👃','🧠','🫀','🫁','🦷','🦴','👀','👁','👅','👄','👶','🧒','👦','👧','🧑','👱','👨','🧔','👩','🧓','👴','👵','🙍','🙎','🙅','🙆','💁','🙋','🧏','🙇','🤦','🤷','👮','🕵','💂','🥷','👷','🤴','👸','👳','👲','🧕','🤵','👰','🤰','🤱','👼','🎅','🤶','🦸','🦹','🧙','🧚','🧛','🧜','🧝','🧞','🧟','💆','💇','🚶','🧍','🧎','🏃','💃','🕺','🕴','👯','🧖','🧗','🤺','🏇','🏂','🏌','🏄','🚣','🏊','🏋','🚴','🚵','🤸','🤼','🤽','🤾','🤹','🧘','🛀','🛌','👭','👫','👬','💏','💑','👪','🗣','👤','👥','🫂','👣','🦰','🦱','🦳','🦲','🐵','🐒','🦍','🦧','🐶','🐕','🦮','🐩','🐺','🦊','🦝','🐱','🐈','🦁','🐯','🐅','🐆','🐴','🐎','🦄','🦓','🦌','🦬','🐮','🐂','🐃','🐄',
            '🐷','🐖','🐗','🐽','🐏','🐑','🐐','🐪','🐫','🦙','🦒','🐘','🦣','🦏','🦛','🐭','🐁','🐀','🐹','🐰','🐇','🐿','🦫','🦔','🦇','🐻','🐨','🐼','🦥','🦦','🦨','🦘','🦡','🐾','🦃','🐔','🐓','🐣','🐤','🐥','🐦','🐧','🕊','🦅','🦆','🦢','🦉','🦤','🪶','🦩','🦚','🦜','🐸','🐊','🐢','🦎','🐍','🐲','🐉','🦕','🦖','🐳','🐋','🐬','🦭','🐟','🐠','🐡','🦈','🐙','🐚','🐌','🦋','🐛','🐜','🐝','🪲','🐞','🦗','🪳','🕷','🕸','🦂','🦟','🪰','🪱','🦠','💐','🌸','💮','🏵','🌹','🥀','🌺','🌻','🌼','🌷','🌱','🪴','🌲','🌳','🌴','🌵','🌾','🌿','🍀','🍁','🍂','🍃','🍇','🍈','🍉','🍊','🍋','🍌','🍍','🥭','🍎','🍏','🍐','🍑','🍒','🍓','🫐','🥝','🍅','🫒','🥥','🥑','🍆','🥔','🥕','🌽','🌶','🫑','🥒','🥬','🥦','🧄','🧅','🍄','🥜','🌰','🍞','🥐','🥖','🫓','🥨','🥯','🥞','🧇','🧀','🍖','🍗','🥩','🥓','🍔','🍟','🍕','🌭','🥪','🌮','🌯','🫔','🥙','🧆','🥚','🍳','🥘','🍲','🫕','🥣','🥗','🍿','🧈','🧂','🥫','🍱','🍘','🍙','🍚','🍛','🍜','🍝','🍠','🍢','🍣','🍤','🍥','🥮','🍡','🥟','🥠','🥡','🦀','🦞','🦐','🦑','🦪','🍦','🍧','🍨','🍩','🍪','🎂','🍰','🧁','🥧','🍫','🍬','🍭','🍮','🍯','🍼','🥛','🫖',
            '🍵','🍶','🍾','🍷','🍸','🍹','🍺','🍻','🥂','🥃','🥤','🧋','🧃','🧉','🧊','🥢','🍽','🍴','🥄','🔪','🏺','🌍','🌎','🌏','🌐','🗺','🗾','🧭','🏔','🌋','🗻','🏕','🏖','🏜','🏝','🏞','🏟','🏛','🏗','🧱','🪨','🪵','🛖','🏘','🏚','🏠','🏡','🏢','🏣','🏤','🏥','🏦','🏨','🏩','🏪','🏫','🏬','🏭','🏯','🏰','💒','🗼','🗽','🕌','🛕','🕍','🕋','🌁','🌃','🏙','🌄','🌅','🌆','🌇','🌉','🎠','🎡','🎢','💈','🎪','🚂','🚃','🚄','🚅','🚆','🚇','🚈','🚉','🚊','🚝','🚞','🚋','🚌','🚍','🚎','🚐','🚑','🚒','🚓','🚔','🚕','🚖','🚗','🚘','🚙','🛻','🚚','🚛','🚜','🏎','🏍','🛵','🦽','🦼','🛺','🚲','🛴','🛹','🛼','🚏','🛣','🛤','🛢','🚨','🚥','🚦','🛑','🚧','🛶','🚤','🛳','🛥','🚢','🛩','🛫','🛬','🪂','💺','🚁','🚟','🚠','🚡','🛰','🚀','🛸','🛎','🧳','🕰','🕛','🕧','🕐','🕜','🕑','🕝','🕒','🕞','🕓','🕟','🕔','🕠','🕕','🕡','🕖','🕢','🕗','🕣','🕘','🕤','🕙','🕥','🕚','🕦','🌑','🌒','🌓','🌔','🌕','🌖','🌗','🌘','🌙','🌚','🌛','🌜','🌡','🌝','🌞','🪐','🌟','🌠','🌌','🌤','🌥','🌦','🌧','🌨','🌩','🌪','🌫','🌬','🌀','🌈','🌂','🔥','💧','🌊','🎃','🎄','🎆','🎇','🧨','🎈','🎉','🎊','🎋','🎍',
            '🎎','🎏','🎐','🎑','🧧','🎀','🎁','🎗','🎟','🎫','🎖','🏆','🏅','🥇','🥈','🥉','🥎','🏀','🏐','🏈','🏉','🎾','🥏','🎳','🏏','🏑','🏒','🥍','🏓','🏸','🥊','🥋','🥅','🎣','🤿','🎽','🎿','🛷','🥌','🎯','🪀','🪁','🎱','🔮','🪄','🧿','🎮','🕹','🎰','🎲','🧩','🧸','🪅','🪆','🃏','🀄','🎴','🎭','🖼','🎨','🧵','🪡','🧶','🪢','👓','🕶','🥽','🥼','🦺','👔','👕','👖','🧣','🧤','🧥','🧦','👗','👘','🥻','🩱','🩲','🩳','👙','👚','👛','👜','👝','🛍','🎒','🩴','👞','👟','🥾','🥿','👠','👡','🩰','👢','👑','👒','🎩','🎓','🧢','🪖','📿','💄','💍','💎','🔇','🔈','🔉','🔊','📢','📣','📯','🔔','🔕','🎼','🎵','🎶','🎙','🎚','🎛','🎤','🎧','📻','🎷','🪗','🎸','🎹','🎺','🎻','🪕','🥁','🪘','📱','📲','📞','📟','📠','🔋','🔌','💻','🖥','🖨','🖱','🖲','💽','💾','💿','📀','🧮','🎥','🎞','📽','🎬','📺','📷','📸','📹','📼','🔍','🔎','🕯','💡','🔦','🏮','🪔','📔','📕','📖','📗','📘','📙','📚','📓','📒','📃','📜','📄','📰','🗞','📑','🔖','🏷','💰','🪙','💴','💵','💶','💷','💸','💳','🧾','💹','📧','📨','📩','📤','📥','📦','📫','📪','📬','📭','📮','🗳','🖋','🖊','🖌','🖍','📝','💼','📁','📂','🗂',
            '📅','📆','🗒','🗓','📇','📈','📉','📊','📋','📌','📍','📎','🖇','📏','📐','🗃','🗄','🗑','🔒','🔓','🔏','🔐','🔑','🗝','🔨','🪓','🛠','🗡','🔫','🪃','🏹','🛡','🪚','🔧','🪛','🔩','🗜','🦯','🔗','🪝','🧰','🧲','🪜','🧪','🧫','🧬','🔬','🔭','📡','💉','🩸','💊','🩹','🩺','🚪','🛗','🪞','🪟','🛏','🛋','🪑','🚽','🪠','🚿','🛁','🪤','🪒','🧴','🧷','🧹','🧺','🧻','🪣','🧼','🪥','🧽','🧯','🛒','🚬','🪦','🗿','🪧','🏧','🚮','🚰',
            '🚹','🚺','🚻','🚼','🚾','🛂','🛃','🛄','🛅','🚸','🚫','🚳','🚭','🚯','🚱','🚷','📵','🔞','🔃','🔄','🔙','🔚','🔛','🔜','🔝','🛐','🕉','🕎','🔯','🔀','🔁','🔂','🔼','🔽','🎦','🔅','🔆','📶','📳','📴','💱','💲','🔱','📛','🔰','🔟','🔠','🔡','🔢','🔣','🔤','🅰','🆎','🅱','🆑','🆒','🆓','🆔','🆕','🆖','🅾','🆗','🅿','🆘','🆙','🆚','🈁','🈂','🈷','🈶','🈯','🉐','🈹','🈚','🈲','🉑','🈸','🈴','🈳','🈺','🈵','🔴','🟠','🟡','🟢','🔵','🟣','🟤','🟥','🟧','🟨','🟩','🟦','🟪','🟫','🔶','🔷','🔸','🔹','🔺','🔻','💠','🔘','🔳','🔲','🏁','🚩','🎌','🏴','🏳','🏻','🏼','🏽','🏾','🏿','☺','☹','☠','❣','❤','✋','✌','☝','✊','✍','⛷','⛹','☘','☕','⛰','⛪','⛩','⛲','⛺','♨','⛽','⚓','⛵','⛴','✈','⌛','⏳','⌚','⏰','⏱','⏲','☀','⭐','☁','⛅','⛈','☂','☔','⛱','⚡','❄','☃','⛄','☄','✨','⚽','⚾','⛳','⛸','♠','♥','♦','♣','♟','⛑','☎','⌨','✉','✏','✒','✂','⛏','⚒','⚔','⚙','⚖','⛓','⚗','⚰','⚱','♿','⚠','⛔','☢','☣','⬆','↗','➡','↘','⬇','↙','⬅','↖','↕','↔','↩','↪','⤴','⤵','⚛','✡','☸','☯','✝','☦','☪','☮','♈','♉','♊','♋','♌','♍','♎','♏','♐','♑','♒','♓','⛎','▶','⏩','⏭',
            '⏯','◀','⏪','⏮','⏫','⏬','⏸','⏹','⏺','⏏','♀','♂','⚧','✖','➕','➖','➗','♾','‼','⁉','❓','❔','❕','❗','〰','⚕','♻','⚜','⭕','✅','☑','✔','❌','❎','➰','➿','〽','✳','✴','❇','©','®','™','ℹ','Ⓜ','㊗','㊙','⚫','⚪','⬛','⬜','◼','◻','◾','◽','▪','▫',' ',
        ].join('|');
        return str.replace(new RegExp(ranges, 'g'), '');
    }
    
    isOnlyEmojis = (str) => {return !this.removeEmoji(str).length;}

    getDate = (i) => {
        const hour = parseInt(new Date(this.props.timeList[i]).toString().slice(16, 18))
        const min = new Date(this.props.timeList[i]).toString().slice(19, 21)

        if (i < (this.props.msgList.length - 1)){
            if(this.props.nameList[i] === this.props.nameList[i + 1]){
                return (
                    <div>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </div>
                );
            }
        }

        if (hour >= 12){
            if (hour === 12){
                return(
                    12 + ":" + min + " pm"
                )
            }
            else{
                return(
                    (hour-12) + ":" + min + " pm"
                )
            }
        }
        else{
            if (hour === 0) {
                return(
                    12 + ":" + min + " am"
                )
            }
            else{
                return(
                    hour + ":" + min + " am"
                )
            }
        }
    }

    handleClickReaction(event){
        var temp = document.getElementById(event)
        if (temp){
            var xcord = temp.getBoundingClientRect().left
            var ycord = temp.getBoundingClientRect().top
            if((window.innerWidth - xcord) < 500){
                xcord = xcord - 430
            }
            else {
                xcord = xcord + 90
            }
            if((window.innerHeight - ycord) < 420){
                ycord = ycord - 300
            }
            else {
                ycord = ycord - 50
            }
            this.setState({ reaction: true, xcord: xcord, ycord: ycord, reactionclicked: event, lastEmoji: Date.now()})
        }
    }


    renderMyDate(i){
        const temp = "index" + i
        if(this.state.hover === temp || this.state.reactionclicked === i){
            return(
                <div>
                <table className = "hoverTable">
                    <tbody>
                        <tr>
                            <td className = "hoverTd" onClick = {() => this.handleClickReaction(i)}>
                                <Tooltip title="Add Reaction" aria-label="Add Reaction">
                                    <Icon icon="fe:smile-plus" className = "smile-plus"/>
                                </Tooltip>
                                
                            </td>
                            <td className = "hoverTd" onClick = {() => this.setState({ reply: i })}>
                                <Tooltip title="Reply" aria-label="Reply">
                                    <Icon icon="bi:reply-fill" className = "reply"/>
                                </Tooltip>
                            </td>
                        </tr>
                    </tbody>
                </table>
                </div>
            )
        }
        else{
            return(
                this.getDate(i)
            )
        }
    }
    
    handleClickReaction2 = (e) =>{
        const id = e.currentTarget.id
        const indexi = id.indexOf('i')
        const indexj = id.indexOf('j')
        const i = parseInt(id.slice(indexi + 1, indexj))
        const j = parseInt(id.slice(indexj + 1, indexj + 2))
        const emojiList = Object.keys(this.props.reactionList[i.toString()])
        this.props.reaction(emojiList[j] , this.props.name, i)
    }

    renderMyReaction = (i) => {
        var reactionList = this.props.reactionList[i.toString()]
        var emojiList = Object.keys(reactionList)
        var returnList = []
        for (var j = 0; j < Math.min(emojiList.length, 7); j++){
            if (reactionList[emojiList[j]].length !== 0){
                var title = ""
                for (var k = 0; k < reactionList[emojiList[j]].length; k++) {
                    if (reactionList[emojiList[j]][k] === this.props.name){
                        title = title + "You"
                    }
                    else{
                        title = title + reactionList[emojiList[j]][k]
                    }
                    if ((k+1) !== reactionList[emojiList[j]].length){
                        title = title + ", "
                    }
                }
                returnList.push(
                    <Tooltip title={title} aria-label="Add Reaction" arrow>
                        <span className = "reactionSpan" id = {"i" + i + "j" + j} onClick = {(e) => this.handleClickReaction2(e)}>   
                            {emojiList[j]}&nbsp;&nbsp;{reactionList[emojiList[j]].length}
                        </span>
                    </Tooltip>
                )
            }
        }
        return returnList
    }

    printMsg = (i) => {
        if  (this.props.replyList[i] === "null"){
            return this.props.msgList[i]
        }
        else {
            return(
                <table>
                    <tbody>
                        <tr>
                            <td>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td className = "ReplyNamePrint">
                                                Replying to: {this.props.nameList[this.props.replyList[i]]}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td className = "ReplyMsgPrint"> 
                                                {this.props.msgList[this.props.replyList[i]]}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                {this.props.msgList[i]}
                            </td>
                        </tr>
                    </tbody>
                </table>
            )
        }
    }

    renderMsg = () => {
        var msg = []
        var list = {
            Bunny: Bunny,
            Bear: Bear,
            Raccoon: Raccoon,
            Squirrel: Squirrel,
            Owl: Owl,
            Deer: Deer
        }
        for (var i = 0; i < this.props.msgList.length; i ++){
            const temp = "index" + i
            if (this.props.nameList[i] === this.props.nameList[i - 1]) {
                if (this.props.nameList[i] === this.props.name) {
                    if (this.isOnlyEmojis(this.props.msgList[i])){
                        msg.push(
                            <>
                            <tr>
                                <td className = "yourName">
                                </td>
                                <td className = "myMsg2" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td className = "myTimezoneEmoji">
                                                    {this.renderMyDate(i)}
                                                </td>
                                                <td className = "myMsgEmoji" id = {i}>
                                                    {this.printMsg(i)}                     
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                            {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                                <tr>
                                    <td className = "yourName"></td>
                                    <td className = "myReaction myMsg" colSpan = {2}>
                                        {this.renderMyReaction(i)}
                                    </td>
                                    <td className = "myName">
                                    </td>
                                </tr>
                            ) : (
                                <>
                                </>
                            )}
                            </>
                        )
                    }
                    else {
                        msg.push(
                            <>
                            <tr>
                                <td className = "yourName">
                                </td>
                                <td className = "myMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td className = "myTimezone">
                                                    {this.renderMyDate(i)}
                                                </td>
                                                <td className = "myMsgDiv" id = {i}>
                                                    {this.printMsg(i)}  
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                            {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                                <tr>
                                    <td className = "yourName"></td>
                                    <td className = "myReaction myMsg" colSpan = {2}>
                                        {this.renderMyReaction(i)}
                                    </td>
                                    <td className = "myName">
                                    </td>
                                </tr>
                            ) : (
                                <>
                                </>
                            )}
                            </>
                        )
                    }
                }
                else {
                    if (this.isOnlyEmojis(this.props.msgList[i])){
                        msg.push(
                            <>
                            <tr>
                                <td className = "yourName">
                                </td>
                                <td className = "yourMsg2" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td className = "yourMsgEmoji">
                                                    {this.printMsg(i)}                     
                                                </td>
                                                <td className = "yourTimezoneEmoji" id = {i}>
                                                    {this.renderMyDate(i)}
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>                                         
                                </td>          
                                <td className = "myName">
                                </td>
                            </tr>
                            {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                                <tr>
                                    <td className = "yourName"></td>
                                    <td className = "yourMsg2" colSpan = {2}>
                                        {this.renderMyReaction(i)}
                                    </td>
                                    <td className = "myName">
                                    </td>
                                </tr>
                            ) : (
                                <>
                                </>
                            )}
                            </>
                        )
                    }
                    else {
                        msg.push(
                            <>
                            <tr>
                                <td className = "yourName">
                                </td>
                                <td className = "yourMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>  
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td className = "yourMsgDiv">
                                                    {this.printMsg(i)}                     
                                                </td>
                                                <td className = "yourTimezone" id = {i}>
                                                    {this.renderMyDate(i)}
                                                </td>         
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                            {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                                <tr>
                                    <td className = "yourName"></td>
                                    <td className = "yourMsg2" colSpan = {2}>
                                        {this.renderMyReaction(i)}
                                    </td>
                                    <td className = "myName">
                                    </td>
                                </tr>
                            ) : (
                                <>
                                </>
                            )}
                            </>
                        )
                    }
                }
            }
            else if (this.props.nameList[i] === this.props.name){
                if (this.isOnlyEmojis(this.props.msgList[i])){
                    msg.push(
                        <>
                        <tr>
                            <td className = "yourName">
                            </td>
                            <td className = "myMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td className = "nameMe" colSpan = {2}>
                                                {this.props.nameList[i]}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td className = "myTimezoneEmoji">
                                                {this.renderMyDate(i)}
                                            </td>
                                            <td className = "myMsgEmojiFirst" id = {i}>
                                                {this.printMsg(i)}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                            <td className = "myName">
                                <img className = "myPic" src={list[this.props.name]} alt = ""/>
                            </td>
                        </tr>
                        {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                            <tr>
                                <td className = "yourName"></td>
                                <td className = "myReaction myMsg" colSpan = {2}>
                                    {this.renderMyReaction(i)}
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                        ) : (
                            <>
                            </>
                        )}
                        </>
                    )
                }
                else{
                    msg.push(
                        <>
                        <tr>
                            <td className = "yourName">
                            </td>
                            <td className = "myMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td className = "nameMe" colSpan = {2}>
                                                {this.props.nameList[i]}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td className = "myTimezone">
                                                {this.renderMyDate(i)}
                                            </td>
                                            <td className = "myMsgDiv" id = {i}>
                                                {this.printMsg(i)}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                            <td className = "myName">
                                <img className = "myPic" src={list[this.props.name]} alt = ""/>
                            </td>
                        </tr>
                        {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                            <tr>
                                <td className = "yourName"></td>
                                <td className = "myReaction myMsg" colSpan = {2}>
                                    {this.renderMyReaction(i)}
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                        ) : (
                            <>
                            </>
                        )}
                        </>
                    )
                }
            }
            else {
                if (this.isOnlyEmojis(this.props.msgList[i])){
                    msg.push(
                        <>
                        <tr>
                            <td className = "yourName">
                                <img className = "myPic" src={list[this.props.nameList[i]]} alt = ""/>
                            </td>
                            <td className = "yourMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td className = "nameYou" colSpan = {2}>
                                                {this.props.nameList[i]}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td className = "yourMsgEmojiFirst">
                                                {this.printMsg(i)}
                                            </td>
                                            <td className = "yourTimezoneEmoji" id = {i}>
                                                {this.renderMyDate(i)}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                            <td className = "myName"></td>
                        </tr>
                        {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                            <tr>
                                <td className = "yourName"></td>
                                <td className = "yourMsg2" colSpan = {2}>
                                    {this.renderMyReaction(i)}
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                        ) : (
                            <>
                            </>
                        )}
                        </>
                    )
                }
                else{
                    msg.push(
                        <>
                        <tr>
                            <td className = "yourName">
                                <img className = "myPic" src={list[this.props.nameList[i]]} alt = ""/>
                            </td>
                            <td className = "yourMsg" onMouseEnter = {() => this.setState({ hover: temp })} onMouseLeave = {() => this.setState({ hover: "" })}>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td className = "nameYou" colSpan = {2}>
                                                {this.props.nameList[i]}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td className = "yourMsgDiv">
                                                {this.printMsg(i)}
                                            </td>
                                            <td className = "yourTimezone" id = {i}>
                                                {this.renderMyDate(i)}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                            <td className = "myName"></td>
                        </tr>
                        {Object.keys(this.props.reactionList).includes(i.toString()) ? (
                            <tr>
                                <td className = "yourName"></td>
                                <td className = "yourMsg2" colSpan = {2}>
                                    {this.renderMyReaction(i)}
                                </td>
                                <td className = "myName">
                                </td>
                            </tr>
                        ) : (
                            <>
                            </>
                        )}
                        </>
                    )
                }
            }
        }
        return(msg)
    }

    sendReaction = e => { 
        let sym = e.unified.split('-')
        let codesArray = []
        db.ref('/' + this.props.roomName + '/'+ this.props.name +'/emojidelay/').push(Date.now() - this.state.lastEmoji)
        sym.forEach(el => codesArray.push('0x' + el))
        let emoji = String.fromCodePoint(...codesArray)
        this.props.reaction(emoji, this.props.name, this.state.reactionclicked)
        this.setState({
            xcord: null,
            ycord: null,
            reactionclicked: null,
            reaction: false
        })
    }

    render() {            
        return (
            <td>
                <div className = "heading1">
                    Chat
                </div>
                {Boolean(this.state.reply !== "null") ? (
                    <>
                        <div className = "ChatRecordReply" id = "ChatRecord">
                            <table className = "chatTable">
                                <tbody>
                                    {this.renderMsg()}
                                </tbody>
                            </table>
                        </div>
                        <div className = "ChatBoxReply">
                            <table className = "TextBoxReply">
                                <tbody>
                                    <tr>
                                        <td className = "ReplyBox">
                                            <table className = "ReplyTable">
                                                <tbody>
                                                    <tr>
                                                        <td className = "ReplyName">
                                                            Replying to: {this.props.nameList[this.state.reply]}
                                                        </td>
                                                        <td rowSpan ={2} className ="exit">
                                                            <i className="fas fa-times exitBtn" onClick = {() => this.setState({ reply: "null" })}></i>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td className = "ReplyMsg"> 
                                                            {this.props.msgList[this.state.reply]}
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td className = "ReplyBox">
                                            <span>
                                                <InputBase
                                                    className = "TextInput"
                                                    placeholder=""
                                                    inputProps={{ 'aria-label': 'naked' }}
                                                    onChange = {event => this.setState({msg: event.target.value, lastType: Date.now()})}
                                                    onKeyDown={this.keyPress}
                                                    autoFocus
                                                    value={this.state.msg}
                                                    inputRef = {this.inputRef}
                                                />
                                                <InsertEmoticonIcon ref = {this.emojiRef} color="action" style={{ fontSize: 27 }} className = "emoji" onClick = {this.handleEmoji}/>
                                                <img src={SendBtn} alt = "" className='send' onClick = {this.sendMsg}/>
                                            </span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </>
                ):(
                    <>
                        <div className = "ChatRecord" id = "ChatRecord">
                            <table className = "chatTable">
                                <tbody>
                                    {this.renderMsg()}
                                </tbody>
                            </table>
                        </div>
                        <div className = "ChatBox">
                            <span className = "TextBox">
                                <InputBase
                                    className = "TextInput"
                                    placeholder=""
                                    inputProps={{ 'aria-label': 'naked' }}
                                    onChange = {event => this.setState({msg: event.target.value, lastType: Date.now()})}
                                    onKeyDown={this.keyPress}
                                    autoFocus
                                    value={this.state.msg}
                                    inputRef = {this.inputRef}
                                />
                                <InsertEmoticonIcon ref = {this.emojiRef} color="action" style={{ fontSize: 27 }} className = "emoji" onClick = {this.handleEmoji}/>
                                <img src={SendBtn} alt = "" className='send' onClick = {this.sendMsg}/>
                            </span>
                        </div>
                    </>
                )}
                {this.state.emoji ? (
                    <div ref = {this.wrapperRef}>
                        <Picker onSelect={this.addEmoji} className = "emojiPicker" style={{ position: 'absolute', bottom: '8%', right: '10vw' }}/>
                    </div>
                ) : ( <></> )}
                {this.state.reaction ? (
                    <div ref = {this.reactionRef}>
                        <Picker onSelect={this.sendReaction} style={{ position: 'absolute', top: this.state.ycord + 'px', left: this.state.xcord + 'px' }}/>
                    </div>
                ) : ( <></> )}
            </td>
        )
    }
}

